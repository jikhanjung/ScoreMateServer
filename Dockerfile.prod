# Production Dockerfile for ScoreMateServer
FROM python:3.9-slim-bullseye as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Install Python dependencies
COPY requirements.txt .
COPY requirements-prod.txt .
RUN pip install --no-cache-dir --user -r requirements-prod.txt


# Production stage
FROM python:3.9-slim-bullseye

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    libpq5 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN adduser --disabled-password --gecos '' --uid 1000 appuser

# Set working directory
WORKDIR /app

# Copy Python dependencies from builder stage
COPY --from=builder /root/.local /home/appuser/.local

# Copy application code
COPY --chown=appuser:appuser . .

# Remove development files
RUN rm -rf tests/ devlog/ .git/ .pytest_cache/ \
    && find . -name "*.pyc" -delete \
    && find . -name "__pycache__" -delete

# Create required directories
RUN mkdir -p /app/staticfiles /app/media \
    && chown -R appuser:appuser /app/staticfiles /app/media

# Switch to non-root user
USER appuser

# Add local Python packages to PATH
ENV PATH="/home/appuser/.local/bin:$PATH"

# Set production environment variables
ENV DJANGO_SETTINGS_MODULE=scoremateserver.settings
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV DJANGO_DEBUG=False

# Collect static files
RUN python manage.py collectstatic --noinput --clear

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python manage.py check --deploy || exit 1

# Expose port
EXPOSE 8000

# Use gunicorn for production
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--worker-class", "sync", "scoremateserver.wsgi:application"]